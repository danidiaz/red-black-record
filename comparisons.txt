upto: zbar

T B (T B (T B E "dbar" E) "dbaz" (T B E "dfoo" E)) "fbaz" (T B (T B E "kgoz" E) "zbar" (T B E "zbaz" E))

Tree02 :: RBT Symbol *
= 'N
    'B
    ('N
       'B ('N 'R 'E "dbar" Bool 'E) "dbaz" Int ('N 'R 'E "dfoo" Char 'E))
    "fbaz"
    Int
    ('N
       'R ('N 'B 'E "kgoz" Int 'E) "zbar" Bool ('N 'B 'E "zbaz" Int 'E))

upto: dbar

╬ø :kind! Tree02
Tree02 :: RBT Symbol *
= 'N
    'B
    ('N 'B ('N 'R 'E "dbar" Bool 'E) "dbaz" Int 'E)
    "fbaz"
    Int
    ('N 'B 'E "kgoz" Int 'E)


T B (T B (T R E "dbar" E) "dbaz" E) "fbaz" (T B E "kgoz" E)

upto dfoo

Tree02 :: RBT Symbol *
= 'N
    'B
    ('N
       'B ('N 'R 'E "dbar" Bool 'E) "dbaz" Int ('N 'R 'E "dfoo" Char 'E))
    "fbaz"
    Int
    ('N 'B 'E "kgoz" Int 'E)

= 'N
    'B
    ('N
       'B ('N 'R 'E "dbar" Bool 'E) "dbaz" Int ('N 'R 'E "dfoo" Char 'E))
    "fbaz"
    Int
    ('N 'B 'E "kgoz" Int 'E)

-- T B (T B (T R E "dbar" E) "dbaz" (T R E "dfoo" E)) "fbaz" (T B E "kgoz" E) -- post
T B (T R (T B E "dbar" E) "dbaz" (T B E "dfoo" E)) "fbaz" (T B E "kgoz" E)

╬ø :kind! Insert "dfoo" Char ('N 'B ('N 'B ('N 'R 'E "dbar" Bool 'E) "dbaz" Int 'E) "fbaz" Int ('N 'B 'E "kgoz" Int 'E))
